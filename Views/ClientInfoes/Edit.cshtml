@model HotelRoomBookingSystem.Models.ClientsInfo

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .confirmation-message {
        position: fixed;
        top: 0;
        left: 50%;
        transform: translateX(-50%);
        background-color: #4CAF50;
        color: white;
        padding: 10px;
        border-radius: 4px;
        opacity: 0;
        transition: opacity 0.5s;
    }
</style>

<h2>Client | Edit</h2>

<div class="form-horizontal">
    @using (Html.BeginForm("Edit", "ClientsInfoes", FormMethod.Post))
    {
        @Html.AntiForgeryToken()

        <hr />
        if (TempData["ConfirmationMessage"] != null)
        {
            <div class="alert alert-success">
                @TempData["ConfirmationMessage"]
            </div>
        }

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @*@Html.HiddenFor(model => model.Id)*@

        <div class="form-group">
            @Html.LabelFor(model => model.Id, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Id, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.Id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientIcPassport, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientIcPassport, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientIcPassport, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientPhoneNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientPhoneNumber, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientPhoneNumber, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientEmail, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.ClientEmail, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ClientEmail, "", new { @class = "text-danger" })
            </div>
        </div>

        List<string> genderOptions = new List<string> { "Male", "Female" };

        <div class="form-group">
            @Html.LabelFor(model => model.ClientGender, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.ClientGender, new SelectList(genderOptions), "Select Gender", new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.ClientGender, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientBirthDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{
                    DateTime nonNullableDateTime;
                    nonNullableDateTime = Model.ClientBirthDate.Value;
                }
                <input type="date" class="form-control" id="ClientBirthDate" name="ClientBirthDate" value="@nonNullableDateTime.ToString("yyyy-MM-dd")" required />
                @Html.ValidationMessageFor(model => model.ClientBirthDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ClientAddress, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ClientAddress, new { @class = "form-control", rows = 3 })
                @Html.ValidationMessageFor(model => model.ClientAddress, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-inline">
            <div class="col-md-offset-2 col-md-2 col-xs-4">
                <a href="@Url.Action("Index")" class="btn btn-info pull-left">Back</a>
                <input type="submit" value="Save" class="btn btn-primary pull-right" />
            </div>
        </div>
    }
    <!-- Button to trigger modal, Delete button in a separate row -->
    <div class="form-group">
        <div class="col-md-1 col-xs-2">
            <button id="editPageDeleteButton" data-toggle="modal" data-target="#deleteModal" class="btn btn-danger pull-right">Delete</button>
        </div>
    </div>
</div>

<!-- Delete form (outside of the main form) -->
@using (Html.BeginForm("Delete", "ClientsInfoes", FormMethod.Post, new { id = "deleteForm", @class = "form-inline" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
}
<!-- Modal -->
@Html.Partial("~/Views/_ModalDialogPartialPage.cshtml")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var urlClientList = "@Url.Action("Index", "ClientsInfoes")";
        var urlSubmit = "@Url.Action("Delete", "ClientsInfoes")";
    </script>
    <script src="~/Scripts/Form/ClientsInfoScript.js"></script>
}


    //@Html.Hidden("fromEdit", "true")